// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pingpong.proto

#include "pingpong.pb.h"
#include "pingpong.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pingpong {

static const char* ping_method_names[] = {
  "/pingpong.ping/SayHello",
  "/pingpong.ping/GladToSeeMe",
  "/pingpong.ping/GladToSeeYou",
  "/pingpong.ping/BothGladToSee",
};

std::unique_ptr< ping::Stub> ping::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ping::Stub> stub(new ping::Stub(channel, options));
  return stub;
}

ping::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SayHello_(ping_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GladToSeeMe_(ping_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GladToSeeYou_(ping_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_BothGladToSee_(ping_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status ping::Stub::SayHello(::grpc::ClientContext* context, const ::pingpong::PingRequest& request, ::pingpong::PingReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pingpong::PingRequest, ::pingpong::PingReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void ping::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::pingpong::PingRequest* request, ::pingpong::PingReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pingpong::PingRequest, ::pingpong::PingReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void ping::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::pingpong::PingRequest* request, ::pingpong::PingReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pingpong::PingReply>* ping::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::pingpong::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pingpong::PingReply, ::pingpong::PingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SayHello_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pingpong::PingReply>* ping::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::pingpong::PingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSayHelloRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::pingpong::PingReply>* ping::Stub::GladToSeeMeRaw(::grpc::ClientContext* context, const ::pingpong::PingRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::pingpong::PingReply>::Create(channel_.get(), rpcmethod_GladToSeeMe_, context, request);
}

void ping::Stub::experimental_async::GladToSeeMe(::grpc::ClientContext* context, const ::pingpong::PingRequest* request, ::grpc::experimental::ClientReadReactor< ::pingpong::PingReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::pingpong::PingReply>::Create(stub_->channel_.get(), stub_->rpcmethod_GladToSeeMe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::pingpong::PingReply>* ping::Stub::AsyncGladToSeeMeRaw(::grpc::ClientContext* context, const ::pingpong::PingRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::pingpong::PingReply>::Create(channel_.get(), cq, rpcmethod_GladToSeeMe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::pingpong::PingReply>* ping::Stub::PrepareAsyncGladToSeeMeRaw(::grpc::ClientContext* context, const ::pingpong::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::pingpong::PingReply>::Create(channel_.get(), cq, rpcmethod_GladToSeeMe_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::pingpong::PingRequest>* ping::Stub::GladToSeeYouRaw(::grpc::ClientContext* context, ::pingpong::PingReply* response) {
  return ::grpc::internal::ClientWriterFactory< ::pingpong::PingRequest>::Create(channel_.get(), rpcmethod_GladToSeeYou_, context, response);
}

void ping::Stub::experimental_async::GladToSeeYou(::grpc::ClientContext* context, ::pingpong::PingReply* response, ::grpc::experimental::ClientWriteReactor< ::pingpong::PingRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::pingpong::PingRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_GladToSeeYou_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::pingpong::PingRequest>* ping::Stub::AsyncGladToSeeYouRaw(::grpc::ClientContext* context, ::pingpong::PingReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::pingpong::PingRequest>::Create(channel_.get(), cq, rpcmethod_GladToSeeYou_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::pingpong::PingRequest>* ping::Stub::PrepareAsyncGladToSeeYouRaw(::grpc::ClientContext* context, ::pingpong::PingReply* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::pingpong::PingRequest>::Create(channel_.get(), cq, rpcmethod_GladToSeeYou_, context, response, false, nullptr);
}

::grpc::ClientReaderWriter< ::pingpong::PingRequest, ::pingpong::PingReply>* ping::Stub::BothGladToSeeRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::pingpong::PingRequest, ::pingpong::PingReply>::Create(channel_.get(), rpcmethod_BothGladToSee_, context);
}

void ping::Stub::experimental_async::BothGladToSee(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::pingpong::PingRequest,::pingpong::PingReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::pingpong::PingRequest,::pingpong::PingReply>::Create(stub_->channel_.get(), stub_->rpcmethod_BothGladToSee_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::pingpong::PingRequest, ::pingpong::PingReply>* ping::Stub::AsyncBothGladToSeeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::pingpong::PingRequest, ::pingpong::PingReply>::Create(channel_.get(), cq, rpcmethod_BothGladToSee_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::pingpong::PingRequest, ::pingpong::PingReply>* ping::Stub::PrepareAsyncBothGladToSeeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::pingpong::PingRequest, ::pingpong::PingReply>::Create(channel_.get(), cq, rpcmethod_BothGladToSee_, context, false, nullptr);
}

ping::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ping_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ping::Service, ::pingpong::PingRequest, ::pingpong::PingReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ping::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pingpong::PingRequest* req,
             ::pingpong::PingReply* resp) {
               return service->SayHello(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ping_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ping::Service, ::pingpong::PingRequest, ::pingpong::PingReply>(
          [](ping::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pingpong::PingRequest* req,
             ::grpc::ServerWriter<::pingpong::PingReply>* writer) {
               return service->GladToSeeMe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ping_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< ping::Service, ::pingpong::PingRequest, ::pingpong::PingReply>(
          [](ping::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::pingpong::PingRequest>* reader,
             ::pingpong::PingReply* resp) {
               return service->GladToSeeYou(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ping_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ping::Service, ::pingpong::PingRequest, ::pingpong::PingReply>(
          [](ping::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::pingpong::PingReply,
             ::pingpong::PingRequest>* stream) {
               return service->BothGladToSee(ctx, stream);
             }, this)));
}

ping::Service::~Service() {
}

::grpc::Status ping::Service::SayHello(::grpc::ServerContext* context, const ::pingpong::PingRequest* request, ::pingpong::PingReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ping::Service::GladToSeeMe(::grpc::ServerContext* context, const ::pingpong::PingRequest* request, ::grpc::ServerWriter< ::pingpong::PingReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ping::Service::GladToSeeYou(::grpc::ServerContext* context, ::grpc::ServerReader< ::pingpong::PingRequest>* reader, ::pingpong::PingReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ping::Service::BothGladToSee(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::pingpong::PingReply, ::pingpong::PingRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pingpong

