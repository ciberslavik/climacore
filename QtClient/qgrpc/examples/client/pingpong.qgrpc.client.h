// Generated by the genQGrpc.py compiler.  DO NOT EDIT!
// source: pingpong.proto
#pragma once

#include <QObject>
#include "pingpong.grpc.pb.h"
#include "QGrpcClient.h"
#include "QGrpcClientMonitor.h"

using pingpong::ping;
using pingpong::PingRequest;
using pingpong::PingReply;

class QpingClientService: public QObject, public QGrpcCliBase::ConnectivityFeatures<ping>, public QGrpcCliBase::MonitorFeatures<QpingClientService>
{
    Q_OBJECT
    using SayHello_RPCtypes = QGrpcCliBase::RPCtypes< QGrpcCliBase::RPC_KIND_UNARY_T, PingRequest, PingReply, QpingClientService >;
    using GladToSeeMe_RPCtypes = QGrpcCliBase::RPCtypes< QGrpcCliBase::RPC_KIND_SERVERSTREAMING_T, PingRequest, PingReply, QpingClientService >;
    using GladToSeeYou_RPCtypes = QGrpcCliBase::RPCtypes< QGrpcCliBase::RPC_KIND_CLIENTSTREAMING_T, PingRequest, PingReply, QpingClientService >;
    using BothGladToSee_RPCtypes = QGrpcCliBase::RPCtypes< QGrpcCliBase::RPC_KIND_BIDISTREAMING_T, PingRequest, PingReply, QpingClientService >;

public:
    explicit QpingClientService():
        QGrpcCliBase::MonitorFeatures<QpingClientService>(this, &QpingClientService::channelStateChanged)
    {}

    virtual ~QpingClientService(){}

public:

    struct SayHelloCallData : public QGrpcCliBase::ClientCallData< SayHello_RPCtypes, SayHelloCallData >
    {
        virtual ~SayHelloCallData() {}
        SayHelloCallData() : QGrpcCliBase::ClientCallData< SayHello_RPCtypes, SayHelloCallData >( &QpingClientService::SayHelloResponse ) {}
    };

    struct GladToSeeMeCallData : public QGrpcCliBase::ClientCallData< GladToSeeMe_RPCtypes, GladToSeeMeCallData >
    {
        virtual ~GladToSeeMeCallData() {}
        GladToSeeMeCallData() : QGrpcCliBase::ClientCallData< GladToSeeMe_RPCtypes, GladToSeeMeCallData >( &QpingClientService::GladToSeeMeResponse ) {}
    };

    struct GladToSeeYouCallData : public QGrpcCliBase::ClientCallData< GladToSeeYou_RPCtypes, GladToSeeYouCallData >
    {
        virtual ~GladToSeeYouCallData() {}
        GladToSeeYouCallData() : QGrpcCliBase::ClientCallData< GladToSeeYou_RPCtypes, GladToSeeYouCallData >( &QpingClientService::GladToSeeYouResponse ) {}
    };

    struct BothGladToSeeCallData : public QGrpcCliBase::ClientCallData< BothGladToSee_RPCtypes, BothGladToSeeCallData >
    {
        virtual ~BothGladToSeeCallData() {}
        BothGladToSeeCallData() : QGrpcCliBase::ClientCallData< BothGladToSee_RPCtypes, BothGladToSeeCallData >( &QpingClientService::BothGladToSeeResponse ) {}
    };

public:

    void SayHello(const SayHello_RPCtypes::RequestType& request)
    {
        if(!connected()) return;
        SayHelloCallData* call = new SayHelloCallData;
        call->request = request;
        call->responder = stub_->AsyncSayHello(&call->context, request, &cq_);
        call->responder->Finish(&call->reply, &call->status, (void*)call);
    }

    void GladToSeeMe(const GladToSeeMe_RPCtypes::RequestType& request)
    {
        if(!connected()) return;
        GladToSeeMeCallData* call = new GladToSeeMeCallData;
        call->request = request;
        call->responder = stub_->AsyncGladToSeeMe(&call->context, request, &cq_, (void*)call);
    }

    void GladToSeeYou()
    {
        if(!connected()) return;
        GladToSeeYouCallData* call = new GladToSeeYouCallData;
        call->responder = stub_->AsyncGladToSeeYou(&call->context, &call->reply, &cq_, (void*)call);
    }

    void BothGladToSee()
    {
        if(!connected()) return;
        BothGladToSeeCallData* call = new BothGladToSeeCallData;
        call->responder = stub_->AsyncBothGladToSee(&call->context, &cq_, (void*)call);
    }


signals:
    void channelStateChanged(int /*prev*/, int /*cur*/);

    void SayHelloResponse(QpingClientService::SayHelloCallData* /*response*/);

    void GladToSeeMeResponse(QpingClientService::GladToSeeMeCallData* /*response*/);

    void GladToSeeYouResponse(QpingClientService::GladToSeeYouCallData* /*response*/);

    void BothGladToSeeResponse(QpingClientService::BothGladToSeeCallData* /*response*/);

};


