// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AppServer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AppServer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AppServer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AppServer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AppServer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AppServer_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_AppServer_2eproto_metadata_getter(int index);
namespace clima_server {
class ServerInfoReply;
struct ServerInfoReplyDefaultTypeInternal;
extern ServerInfoReplyDefaultTypeInternal _ServerInfoReply_default_instance_;
class ServerInfoRequest;
struct ServerInfoRequestDefaultTypeInternal;
extern ServerInfoRequestDefaultTypeInternal _ServerInfoRequest_default_instance_;
}  // namespace clima_server
PROTOBUF_NAMESPACE_OPEN
template<> ::clima_server::ServerInfoReply* Arena::CreateMaybeMessage<::clima_server::ServerInfoReply>(Arena*);
template<> ::clima_server::ServerInfoRequest* Arena::CreateMaybeMessage<::clima_server::ServerInfoRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace clima_server {

// ===================================================================

class ServerInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clima_server.ServerInfoRequest) */ {
 public:
  inline ServerInfoRequest() : ServerInfoRequest(nullptr) {}
  virtual ~ServerInfoRequest();
  explicit constexpr ServerInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerInfoRequest(const ServerInfoRequest& from);
  ServerInfoRequest(ServerInfoRequest&& from) noexcept
    : ServerInfoRequest() {
    *this = ::std::move(from);
  }

  inline ServerInfoRequest& operator=(const ServerInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfoRequest& operator=(ServerInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfoRequest* internal_default_instance() {
    return reinterpret_cast<const ServerInfoRequest*>(
               &_ServerInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerInfoRequest& a, ServerInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoRequest* New() const final {
    return CreateMaybeMessage<ServerInfoRequest>(nullptr);
  }

  ServerInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerInfoRequest& from);
  void MergeFrom(const ServerInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clima_server.ServerInfoRequest";
  }
  protected:
  explicit ServerInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_AppServer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:clima_server.ServerInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AppServer_2eproto;
};
// -------------------------------------------------------------------

class ServerInfoReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clima_server.ServerInfoReply) */ {
 public:
  inline ServerInfoReply() : ServerInfoReply(nullptr) {}
  virtual ~ServerInfoReply();
  explicit constexpr ServerInfoReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerInfoReply(const ServerInfoReply& from);
  ServerInfoReply(ServerInfoReply&& from) noexcept
    : ServerInfoReply() {
    *this = ::std::move(from);
  }

  inline ServerInfoReply& operator=(const ServerInfoReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfoReply& operator=(ServerInfoReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerInfoReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfoReply* internal_default_instance() {
    return reinterpret_cast<const ServerInfoReply*>(
               &_ServerInfoReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerInfoReply& a, ServerInfoReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfoReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfoReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoReply* New() const final {
    return CreateMaybeMessage<ServerInfoReply>(nullptr);
  }

  ServerInfoReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfoReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerInfoReply& from);
  void MergeFrom(const ServerInfoReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clima_server.ServerInfoReply";
  }
  protected:
  explicit ServerInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_AppServer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerNameFieldNumber = 1,
    kVersionMinorFieldNumber = 2,
    kVersionMajorFieldNumber = 3,
  };
  // string ServerName = 1;
  void clear_servername();
  const std::string& servername() const;
  void set_servername(const std::string& value);
  void set_servername(std::string&& value);
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  std::string* mutable_servername();
  std::string* release_servername();
  void set_allocated_servername(std::string* servername);
  private:
  const std::string& _internal_servername() const;
  void _internal_set_servername(const std::string& value);
  std::string* _internal_mutable_servername();
  public:

  // int32 VersionMinor = 2;
  void clear_versionminor();
  ::PROTOBUF_NAMESPACE_ID::int32 versionminor() const;
  void set_versionminor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_versionminor() const;
  void _internal_set_versionminor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 VersionMajor = 3;
  void clear_versionmajor();
  ::PROTOBUF_NAMESPACE_ID::int32 versionmajor() const;
  void set_versionmajor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_versionmajor() const;
  void _internal_set_versionmajor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:clima_server.ServerInfoReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servername_;
  ::PROTOBUF_NAMESPACE_ID::int32 versionminor_;
  ::PROTOBUF_NAMESPACE_ID::int32 versionmajor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AppServer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerInfoRequest

// -------------------------------------------------------------------

// ServerInfoReply

// string ServerName = 1;
inline void ServerInfoReply::clear_servername() {
  servername_.ClearToEmpty();
}
inline const std::string& ServerInfoReply::servername() const {
  // @@protoc_insertion_point(field_get:clima_server.ServerInfoReply.ServerName)
  return _internal_servername();
}
inline void ServerInfoReply::set_servername(const std::string& value) {
  _internal_set_servername(value);
  // @@protoc_insertion_point(field_set:clima_server.ServerInfoReply.ServerName)
}
inline std::string* ServerInfoReply::mutable_servername() {
  // @@protoc_insertion_point(field_mutable:clima_server.ServerInfoReply.ServerName)
  return _internal_mutable_servername();
}
inline const std::string& ServerInfoReply::_internal_servername() const {
  return servername_.Get();
}
inline void ServerInfoReply::_internal_set_servername(const std::string& value) {
  
  servername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerInfoReply::set_servername(std::string&& value) {
  
  servername_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clima_server.ServerInfoReply.ServerName)
}
inline void ServerInfoReply::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:clima_server.ServerInfoReply.ServerName)
}
inline void ServerInfoReply::set_servername(const char* value,
    size_t size) {
  
  servername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clima_server.ServerInfoReply.ServerName)
}
inline std::string* ServerInfoReply::_internal_mutable_servername() {
  
  return servername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerInfoReply::release_servername() {
  // @@protoc_insertion_point(field_release:clima_server.ServerInfoReply.ServerName)
  return servername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerInfoReply::set_allocated_servername(std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clima_server.ServerInfoReply.ServerName)
}

// int32 VersionMinor = 2;
inline void ServerInfoReply::clear_versionminor() {
  versionminor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReply::_internal_versionminor() const {
  return versionminor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReply::versionminor() const {
  // @@protoc_insertion_point(field_get:clima_server.ServerInfoReply.VersionMinor)
  return _internal_versionminor();
}
inline void ServerInfoReply::_internal_set_versionminor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  versionminor_ = value;
}
inline void ServerInfoReply::set_versionminor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_versionminor(value);
  // @@protoc_insertion_point(field_set:clima_server.ServerInfoReply.VersionMinor)
}

// int32 VersionMajor = 3;
inline void ServerInfoReply::clear_versionmajor() {
  versionmajor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReply::_internal_versionmajor() const {
  return versionmajor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReply::versionmajor() const {
  // @@protoc_insertion_point(field_get:clima_server.ServerInfoReply.VersionMajor)
  return _internal_versionmajor();
}
inline void ServerInfoReply::_internal_set_versionmajor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  versionmajor_ = value;
}
inline void ServerInfoReply::set_versionmajor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_versionmajor(value);
  // @@protoc_insertion_point(field_set:clima_server.ServerInfoReply.VersionMajor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace clima_server

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AppServer_2eproto
